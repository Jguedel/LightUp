{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jgued\\\\ClassWork\\\\react-lights-out\\\\src\\\\Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board(_ref) {\n  _s();\n  let {\n    nrows = 5,\n    ncols = 5,\n    chanceLightStartsOn = 9\n  } = _ref;\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let index = 0; index < nrows; index++) {\n      initialBoard.push([...Array(ncols)]);\n      for (let z = 0; z < initialBoard[index].length; z++) {\n        let radNum = Math.floor(Math.random() * 10) + 1;\n        if (chanceLightStartsOn >= radNum) {\n          initialBoard[index][z] = true;\n        } else {\n          initialBoard[index][z] = false;\n        }\n      }\n    }\n    return initialBoard;\n  }\n  function hasWon() {\n    let won = true;\n    board.forEach(row => {\n      row.forEach(col => {\n        if (col == false) {\n          won = false;\n        }\n      });\n    });\n    return won;\n  }\n  function restart() {\n    setBoard(createBoard());\n  }\n  function flipCellsAround(cord) {\n    setBoard(oldBoard => {\n      const [y, x] = cord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          //change square clicked\n          boardCopy[y][x] = !boardCopy[y][x];\n          //change square up if exist\n          // if (typeof boardCopy[y - 1] != \"undefined\") {\n          //   boardCopy[y - 1][x] = !boardCopy[y - 1][x];\n          // }\n          // //change square down if exist\n          // if (typeof boardCopy[y + 1] != \"undefined\") {\n          //   boardCopy[y + 1][x] = !boardCopy[y + 1][x];\n          // }\n          // //change square right if exist\n          // if (typeof boardCopy[y][x + 1] != \"undefined\") {\n          //   boardCopy[y][x + 1] = !boardCopy[y][x + 1];\n          // }\n          // //change square left if exist\n          // if (typeof boardCopy[y][x - 1] != \"undefined\") {\n          //   boardCopy[y][x - 1] = !boardCopy[y][x - 1];\n          // }\n          return boardCopy;\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard and flip cells\n      let newBoard = oldBoard.map(row => [...row]);\n      newBoard = flipCell(y, x, newBoard);\n\n      // TODO: return the copy\n      return newBoard;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  const winner = () => {\n    if (hasWon() === true) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"winScreen\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"You Win\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: restart,\n          children: \"restart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"Board\",\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: tblBoard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  // TODO\n\n  // make table board\n  let tblBoard = [];\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n    for (let x = 0; x < ncols; x++) {\n      let cord = `${y}-${x}`;\n      row.push( /*#__PURE__*/_jsxDEV(Cell, {\n        isLit: board[y][x],\n        flipCellsAroundMe: e => flipCellsAround(cord)\n      }, cord, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this));\n    }\n    tblBoard.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: row\n    }, y, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 19\n    }, this));\n  }\n  return winner();\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","_ref","_s","nrows","ncols","chanceLightStartsOn","board","setBoard","createBoard","initialBoard","index","push","Array","z","length","radNum","Math","floor","random","hasWon","won","forEach","row","col","restart","flipCellsAround","cord","oldBoard","y","x","split","map","Number","flipCell","boardCopy","newBoard","winner","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","tblBoard","isLit","flipCellsAroundMe","e","_c","$RefreshReg$"],"sources":["C:/Users/jgued/ClassWork/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows = 5, ncols = 5, chanceLightStartsOn = 9 }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let index = 0; index < nrows; index++) {\n      initialBoard.push([...Array(ncols)]);\n      for (let z = 0; z < initialBoard[index].length; z++) {\n        let radNum = Math.floor(Math.random() * 10) + 1;\n        if (chanceLightStartsOn >= radNum) {\n          initialBoard[index][z] = true;\n        } else {\n          initialBoard[index][z] = false;\n        }\n      }\n    }\n    return initialBoard;\n  }\n\n  function hasWon() {\n    let won = true;\n    board.forEach((row) => {\n      row.forEach((col) => {\n        if (col == false) {\n          won = false;\n        }\n      });\n    });\n    return won;\n  }\n  function restart() {\n    setBoard(createBoard());\n  }\n\n  function flipCellsAround(cord) {\n    setBoard((oldBoard) => {\n      const [y, x] = cord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          //change square clicked\n          boardCopy[y][x] = !boardCopy[y][x];\n          //change square up if exist\n          // if (typeof boardCopy[y - 1] != \"undefined\") {\n          //   boardCopy[y - 1][x] = !boardCopy[y - 1][x];\n          // }\n          // //change square down if exist\n          // if (typeof boardCopy[y + 1] != \"undefined\") {\n          //   boardCopy[y + 1][x] = !boardCopy[y + 1][x];\n          // }\n          // //change square right if exist\n          // if (typeof boardCopy[y][x + 1] != \"undefined\") {\n          //   boardCopy[y][x + 1] = !boardCopy[y][x + 1];\n          // }\n          // //change square left if exist\n          // if (typeof boardCopy[y][x - 1] != \"undefined\") {\n          //   boardCopy[y][x - 1] = !boardCopy[y][x - 1];\n          // }\n          return boardCopy;\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard and flip cells\n      let newBoard = oldBoard.map((row) => [...row]);\n      newBoard = flipCell(y, x, newBoard);\n\n      // TODO: return the copy\n      return newBoard;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  const winner = () => {\n    if (hasWon() === true) {\n      return (\n        <div className=\"winScreen\">\n          <h1>You Win</h1>\n          <button onClick={restart}>restart</button>\n        </div>\n      );\n    } else {\n      return (\n        <table className=\"Board\">\n          <tbody>{tblBoard}</tbody>\n        </table>\n      );\n    }\n  };\n  // TODO\n\n  // make table board\n  let tblBoard = [];\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n    for (let x = 0; x < ncols; x++) {\n      let cord = `${y}-${x}`;\n      row.push(\n        <Cell\n          key={cord}\n          isLit={board[y][x]}\n          flipCellsAroundMe={(e) => flipCellsAround(cord)}\n        />\n      );\n    }\n    tblBoard.push(<tr key={y}>{row}</tr>);\n  }\n  return winner();\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}