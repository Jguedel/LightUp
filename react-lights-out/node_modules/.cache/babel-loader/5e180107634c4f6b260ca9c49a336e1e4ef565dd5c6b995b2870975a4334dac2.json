{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jgued\\\\ClassWork\\\\react-lights-out\\\\src\\\\Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board(_ref) {\n  _s();\n  let {\n    nrows = 5,\n    ncols = 5,\n    chanceLightStartsOn = 1\n  } = _ref;\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let index = 0; index < nrows; index++) {\n      initialBoard.push([...Array(ncols)]);\n      for (let z = 0; z < initialBoard[index].length; z++) {\n        let radNum = Math.floor(Math.random() * 10) + 1;\n        if (chanceLightStartsOn >= radNum) {\n          initialBoard[index][z] = true;\n        } else {\n          initialBoard[index][z] = false;\n        }\n      }\n    }\n    return initialBoard;\n  }\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n  }\n  function flipCellsAround(cord) {\n    setBoard(oldBoard => {\n      const [y, x] = cord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          console.log(\"hit\");\n          console.log(boardCopy);\n          if (boardCopy[y][x] == true) {\n            boardCopy[y][x] = false;\n          } else {\n            boardCopy[y][x] = false;\n          }\n          console.log(boardCopy);\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      let newBoard = [...oldBoard];\n      newBoard.filter = (click, i) => {\n        console.log(click);\n      };\n      // TODO: in the copy, flip this cell and the cells around it\n\n      // TODO: return the copy\n      return newBoard;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  // make table board\n  let tblBoard = [];\n  console.log(board);\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n    for (let x = 0; x < ncols; x++) {\n      let cord = `${y}-${x}`;\n      row.push( /*#__PURE__*/_jsxDEV(Cell, {\n        isLit: board[y][x],\n        flipCellsAroundMe: e => flipCellsAround(cord)\n      }, cord, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this));\n    }\n    tblBoard.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: row\n    }, y, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 19\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"Board\",\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: tblBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","_ref","_s","nrows","ncols","chanceLightStartsOn","board","setBoard","createBoard","initialBoard","index","push","Array","z","length","radNum","Math","floor","random","hasWon","flipCellsAround","cord","oldBoard","y","x","split","map","Number","flipCell","boardCopy","console","log","newBoard","filter","click","i","tblBoard","row","isLit","flipCellsAroundMe","e","fileName","_jsxFileName","lineNumber","columnNumber","children","className","_c","$RefreshReg$"],"sources":["C:/Users/jgued/ClassWork/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows = 5, ncols = 5, chanceLightStartsOn = 1 }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let index = 0; index < nrows; index++) {\n      initialBoard.push([...Array(ncols)]);\n      for (let z = 0; z < initialBoard[index].length; z++) {\n        let radNum = Math.floor(Math.random() * 10) + 1;\n        if (chanceLightStartsOn >= radNum) {\n          initialBoard[index][z] = true;\n        } else {\n          initialBoard[index][z] = false;\n        }\n      }\n    }\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n  }\n\n  function flipCellsAround(cord) {\n    setBoard((oldBoard) => {\n      const [y, x] = cord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          console.log(\"hit\");\n          console.log(boardCopy);\n          if (boardCopy[y][x] == true) {\n            boardCopy[y][x] = false;\n          } else {\n            boardCopy[y][x] = false;\n          }\n          console.log(boardCopy);\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      let newBoard = [...oldBoard];\n      newBoard.filter = (click, i) => {\n        console.log(click);\n      };\n      // TODO: in the copy, flip this cell and the cells around it\n\n      // TODO: return the copy\n      return newBoard;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  // make table board\n  let tblBoard = [];\n  console.log(board);\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n    for (let x = 0; x < ncols; x++) {\n      let cord = `${y}-${x}`;\n      row.push(\n        <Cell\n          key={cord}\n          isLit={board[y][x]}\n          flipCellsAroundMe={(e) => flipCellsAround(cord)}\n        />\n      );\n    }\n    tblBoard.push(<tr key={y}>{row}</tr>);\n  }\n\n  return (\n    <table className=\"Board\">\n      <tbody>{tblBoard}</tbody>\n    </table>\n  );\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}